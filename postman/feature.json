{
	"info": {
		"_postman_id": "cfb4ed29-7ba3-4b29-b3dd-6e3a284247b5",
		"name": "FeatureTests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25506839"
	},
	"item": [
		{
			"name": "Add location",
			"item": [
				{
					"name": "Validation",
					"item": [
						{
							"name": "Add location no params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lat\":null,\r\n    \"lon\":null,\r\n    \"radius\":null,\r\n    \"place\":null\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/admin/locations",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add location null latitude",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lat\":null,\r\n    \"lon\":60,\r\n    \"radius\":1,\r\n    \"place\":\"place\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/admin/locations",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add location latitude out of range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lat\":-91,\r\n    \"lon\":60,\r\n    \"radius\":1,\r\n    \"place\":\"place\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/admin/locations",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add location null longitude",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lat\":60,\r\n    \"lon\":null,\r\n    \"radius\":1,\r\n    \"place\":\"place\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/admin/locations",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add location longitude out of range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lat\":60,\r\n    \"lon\":-181,\r\n    \"radius\":1,\r\n    \"place\":\"place\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/admin/locations",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add location negative radius",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lat\":0,\r\n    \"lon\":0,\r\n    \"radius\":-1,\r\n    \"place\":\"place\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/admin/locations",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add location blank place",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lat\":60,\r\n    \"lon\":60,\r\n    \"radius\":1,\r\n    \"place\":\"    \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/admin/locations",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add valid location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location;\r",
											"    try {\r",
											"        location = rnd.getLocation();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(location),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, lat, lon, radius, country, city, place\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('lat');\r",
											"pm.expect(target).to.have.property('lon');\r",
											"pm.expect(target).to.have.property('radius');\r",
											"pm.expect(target).to.have.property('country');\r",
											"pm.expect(target).to.have.property('city');\r",
											"pm.expect(target).to.have.property('place');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.lat).equal(source.lat, 'Широта должна совпадать');\r",
											"    pm.expect(target.lon).equal(source.lon, 'Долгота должна совпадать');\r",
											"    pm.expect(target.radius).equal(source.radius, 'Радиус должен совпадать');\r",
											"    pm.expect(target.place).equal(source.place, 'Назмание места должно совпадать');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/admin/locations",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update location latitude out of range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lat\":91,\r\n    \"lon\":-180,\r\n    \"radius\":1,\r\n    \"place\":\"place\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/admin/locations/:locationId",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations",
										":locationId"
									],
									"variable": [
										{
											"key": "locationId",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update location longitude out of range Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"lat\":-90,\r\n    \"lon\":181,\r\n    \"radius\":1,\r\n    \"place\":\"place\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/admin/locations/:locationId",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations",
										":locationId"
									],
									"variable": [
										{
											"key": "locationId",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update location negative radius",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"lat\":0,\r\n    \"lon\":0,\r\n    \"radius\":0,\r\n    \"place\":\"place\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/admin/locations/:locationId",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations",
										":locationId"
									],
									"variable": [
										{
											"key": "locationId",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update location blank place",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"lat\":0,\r\n    \"lon\":0,\r\n    \"radius\":1,\r\n    \"place\":\"  \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/admin/locations/:locationId",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations",
										":locationId"
									],
									"variable": [
										{
											"key": "locationId",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Location service",
					"item": [
						{
							"name": "Check geocoding",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, lat, lon, radius, country, city, place\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('lat');\r",
											"pm.expect(target).to.have.property('lon');\r",
											"pm.expect(target).to.have.property('radius');\r",
											"pm.expect(target).to.have.property('country');\r",
											"pm.expect(target).to.have.property('city');\r",
											"pm.expect(target).to.have.property('place');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.country).equal(\"Madagascar\", 'Страна должна быть Madagascar');\r",
											"    pm.expect(target.city).equal(\"Toliara\", 'Город должен быть Toliara');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lat\":-23.352862275637666,\r\n    \"lon\":43.687992598887696,\r\n    \"radius\":1,\r\n    \"place\":\"place\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/admin/locations",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Admin access",
					"item": [
						{
							"name": "Add same location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location;\r",
											"    try {\r",
											"        location = await api.addLocation(rnd.getLocation());\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: location,\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
											"    pm.response.to.have.status(409);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/admin/locations",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location;\r",
											"    let location2;\r",
											"    let newRadius;\r",
											"    let newLon;\r",
											"    let newLat;\r",
											"    try {\r",
											"        location = await api.addLocation(rnd.getLocation());\r",
											"        newRadius = parseInt(pm.variables.replaceIn('{{$randomInt}}'));\r",
											"        newLat= parseFloat(pm.variables.replaceIn('{{$randomLatitude}}'));\r",
											"        newLon= parseFloat(pm.variables.replaceIn('{{$randomLongitude}}'));\r",
											"        location2 = location;\r",
											"        location2.lat = newLat;\r",
											"        location2.radius = newRadius;\r",
											"        location2.lon = newLon;\r",
											"        pm.collectionVariables.set(\"locationId\", location.id);\r",
											"        pm.collectionVariables.set('response', location2);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                radius: newRadius,\r",
											"                lat: newLat,\r",
											"                lon: newLon\r",
											"            }),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, lat, lon, radius, country, city, place\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('lat');\r",
											"pm.expect(target).to.have.property('lon');\r",
											"pm.expect(target).to.have.property('radius');\r",
											"pm.expect(target).to.have.property('country');\r",
											"pm.expect(target).to.have.property('city');\r",
											"pm.expect(target).to.have.property('place');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.lat).equal(source.lat, 'Широта должна совпадать');\r",
											"    pm.expect(target.lon).equal(source.lon, 'Долгота должна совпадать');\r",
											"    pm.expect(target.radius).equal(source.radius, 'Радиус должен совпадать');\r",
											"    pm.expect(target.place).equal(source.place, 'Назмание места должно совпадать');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/admin/locations/:locationId",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations",
										":locationId"
									],
									"variable": [
										{
											"key": "locationId",
											"value": "{{locationId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update to existing location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"\r",
											"    let location1;\r",
											"    let location2;\r",
											"    \r",
											"    try {\r",
											"        location1 = await api.addLocation(rnd.getLocation());\r",
											"        location2 = await api.addLocation(rnd.getLocation());\r",
											"        pm.collectionVariables.set(\"locationId\", location2.id)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                lat: location1.lat,\r",
											"                lon: location1.lon,\r",
											"                place: location1.place\r",
											"            }),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
											"    pm.response.to.have.status(409);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/admin/locations/:locationId",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations",
										":locationId"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "locationId",
											"value": "{{locationId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update location that is in use",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"\r",
											"    let location;\r",
											"    let event;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event = await api.addEvent(user.id,rnd.getEvent(category.id));\r",
											"        location = event.location;\r",
											"           pm.collectionVariables.set(\"locationId\", location.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"               \r",
											"                lat: location.lat+1,\r",
											"                lon: location.lon+1,\r",
											"            }),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
											"    pm.response.to.have.status(409);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/admin/locations/:locationId",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations",
										":locationId"
									],
									"variable": [
										{
											"key": "locationId",
											"value": "{{locationId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location;\r",
											"    try {\r",
											"        location = await api.addLocation(rnd.getLocation());\r",
											"        pm.collectionVariables.set('response', location);\r",
											"        pm.collectionVariables.set(\"locationId\", location.id)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, lat, lon, radius, country, city, place\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('lat');\r",
											"pm.expect(target).to.have.property('lon');\r",
											"pm.expect(target).to.have.property('radius');\r",
											"pm.expect(target).to.have.property('country');\r",
											"pm.expect(target).to.have.property('city');\r",
											"pm.expect(target).to.have.property('place');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.lat).equal(source.lat, 'Широта должна совпадать');\r",
											"    pm.expect(target.lon).equal(source.lon, 'Долгота должна совпадать');\r",
											"    pm.expect(target.radius).equal(source.radius, 'Радиус должен совпадать');\r",
											"    pm.expect(target.place).equal(source.place, 'Назмание места должно совпадать');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{serverUrl}}/admin/locations/:locationId",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations",
										":locationId"
									],
									"variable": [
										{
											"key": "locationId",
											"value": "{{locationId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete admin`s location that in use",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location;\r",
											"    try {\r",
											"\r",
											"        location = await api.addLocation(rnd.getLocation());\r",
											"        pm.collectionVariables.set(\"locationId\", location.id);\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id,rnd.getEventWithLocationId(category.id,location.id));\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
											"    pm.response.to.have.status(409);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{serverUrl}}/admin/locations/:locationId",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations",
										":locationId"
									],
									"variable": [
										{
											"key": "locationId",
											"value": "{{locationId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user`s location that in use",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id,rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"locationId\", event.location.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
											"    pm.response.to.have.status(409);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{serverUrl}}/admin/locations/:locationId",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations",
										":locationId"
									],
									"variable": [
										{
											"key": "locationId",
											"value": "{{locationId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete unused locations",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location1;\r",
											"    let location2;\r",
											"    let location3;\r",
											"    let event1;\r",
											"    let event2;\r",
											"    let event3;\r",
											"    try {\r",
											"        location1 = await api.addLocation(rnd.getLocation());\r",
											"        location2 = await api.addLocation(rnd.getLocation());\r",
											"        const user1 = await api.addUser(rnd.getUser());\r",
											"        const user2 = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event1 = await api.addEvent(user1.id,rnd.getEvent(category.id));\r",
											"        location3 = event1.location;\r",
											"        event2 = await api.addEvent(user1.id,rnd.getEventWithLocationId(category.id,location3.id));\r",
											"        event3 = await api.addEvent(user2.id,rnd.getEventWithLocationId(category.id,location1.id));\r",
											"        event2 = await api.updateEvent(event2.id,{location:{id:location1.id}});\r",
											"        event1 = await api.updateEvent(event1.id,{location:{id:location1.id}});\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Пользователи должны содержать поля: id, name, email\", function () {\r",
											"    pm.expect(target[0]).to.have.property('id');\r",
											"    pm.expect(target[0]).to.have.property('lat');\r",
											"    pm.expect(target[0]).to.have.property('lon');\r",
											"    pm.expect(target[0]).to.have.property('radius');\r",
											"    pm.expect(target[0]).to.have.property('country');\r",
											"    pm.expect(target[0]).to.have.property('city');\r",
											"    pm.expect(target[0]).to.have.property('place');\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Должен быть найден только один пользователь по заданному фильтру\", function () {\r",
											"    pm.expect(target.length).to.gte(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{serverUrl}}/admin/locations/",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Events scenarios",
					"item": [
						{
							"name": "Event adding by coords",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event = rnd.getEvent(category.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(event),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('annotation');\r",
											"pm.expect(target).to.have.property('category');\r",
											"pm.expect(target).to.have.property('paid');\r",
											"pm.expect(target).to.have.property('eventDate');\r",
											"pm.expect(target).to.have.property('initiator');\r",
											"pm.expect(target).to.have.property('description');\r",
											"pm.expect(target).to.have.property('participantLimit');\r",
											"pm.expect(target).to.have.property('state');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('location');\r",
											"pm.expect(target).to.have.property('requestModeration');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
											"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
											"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
											"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
											"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
											"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
											"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
											"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
											"    pm.expect(target.location.radius.toString()).equal(source.location.radius.toString(), 'Радиус локации проведения события должен соответствовать радиусу локации проведения события в запросе');\r",
											"    pm.expect(target.location.place).equal(source.location.place, 'Название локации проведения события должно соответствовать названию локации проведения события в запросе');\r",
											"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/users/:userId/events",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Event adding by location id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    let location;\r",
											"    try {\r",
											"        location = await api.addLocation(rnd.getLocation());\r",
											"        pm.collectionVariables.set('response', location);\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event = rnd.getEventWithLocationId(category.id,location.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(event),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const locaionSource = pm.collectionVariables.get('response');\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('annotation');\r",
											"pm.expect(target).to.have.property('category');\r",
											"pm.expect(target).to.have.property('paid');\r",
											"pm.expect(target).to.have.property('eventDate');\r",
											"pm.expect(target).to.have.property('initiator');\r",
											"pm.expect(target).to.have.property('description');\r",
											"pm.expect(target).to.have.property('participantLimit');\r",
											"pm.expect(target).to.have.property('state');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('location');\r",
											"pm.expect(target).to.have.property('requestModeration');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
											"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
											"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
											"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
											"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
											"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
											"    pm.expect(target.location.lat.toString()).equal(locaionSource.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
											"    pm.expect(target.location.lon.toString()).equal(locaionSource.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
											"    pm.expect(target.location.radius.toString()).equal(locaionSource.radius.toString(), 'Радиус локации проведения события должен соответствовать радиусу локации проведения события в запросе');\r",
											"    pm.expect(target.location.place).equal(locaionSource.place, 'Название локации проведения события должно соответствовать названию локации проведения события в запросе');\r",
											"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/users/:userId/events",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add event by other`s published location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event1;\r",
											"    let event2;\r",
											"    try {\r",
											"        \r",
											"        const user1 = await api.addUser(rnd.getUser());\r",
											"        const user2 = await api.addUser(rnd.getUser());\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event1 = await api.addEvent(user1.id, rnd.getEvent(category.id));\r",
											"        event1 = await api.publishEvent(event1.id);\r",
											"        pm.collectionVariables.set(\"uid\", user2.id)\r",
											"        pm.collectionVariables.set('response', event1.location);\r",
											"        event2 = rnd.getEventWithLocationId(category.id,event1.location.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(event2),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const locaionSource = pm.collectionVariables.get('response');\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('annotation');\r",
											"pm.expect(target).to.have.property('category');\r",
											"pm.expect(target).to.have.property('paid');\r",
											"pm.expect(target).to.have.property('eventDate');\r",
											"pm.expect(target).to.have.property('initiator');\r",
											"pm.expect(target).to.have.property('description');\r",
											"pm.expect(target).to.have.property('participantLimit');\r",
											"pm.expect(target).to.have.property('state');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('location');\r",
											"pm.expect(target).to.have.property('requestModeration');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
											"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
											"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
											"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
											"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
											"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
											"    pm.expect(target.location.lat.toString()).equal(locaionSource.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
											"    pm.expect(target.location.lon.toString()).equal(locaionSource.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
											"    pm.expect(target.location.radius.toString()).equal(locaionSource.radius.toString(), 'Радиус локации проведения события должен соответствовать радиусу локации проведения события в запросе');\r",
											"    pm.expect(target.location.place).equal(locaionSource.place, 'Название локации проведения события должно соответствовать названию локации проведения события в запросе');\r",
											"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/users/:userId/events",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add event by other`s non published location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event1;\r",
											"    let event2;\r",
											"    try {\r",
											"        \r",
											"        const user1 = await api.addUser(rnd.getUser());\r",
											"        const user2 = await api.addUser(rnd.getUser());\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event1 = await api.addEvent(user1.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"uid\", user2.id)\r",
											"        event2 = rnd.getEventWithLocationId(category.id,event1.location.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(event2),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
											"    pm.response.to.be.notFound;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/users/:userId/events",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add event by own non published location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event1;\r",
											"    let event2;\r",
											"    try {\r",
											"        \r",
											"        const user1 = await api.addUser(rnd.getUser());\r",
											"        const user2 = await api.addUser(rnd.getUser());\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event1 = await api.addEvent(user1.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"uid\", user2.id)\r",
											"        event2 = rnd.getEventWithLocationId(category.id,event1.location.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(event2),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
											"    pm.response.to.be.notFound;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/users/:userId/events",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin updates event location that is not in use",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        location = rnd.getLocation();\r",
											"        location.id = event.location.id;\r",
											"        event2 = event;\r",
											"        event2.location = location;\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"        pm.collectionVariables.set(\"response\", event2);\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                location: location\r",
											"            }),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('annotation');\r",
											"pm.expect(target).to.have.property('category');\r",
											"pm.expect(target).to.have.property('paid');\r",
											"pm.expect(target).to.have.property('eventDate');\r",
											"pm.expect(target).to.have.property('initiator');\r",
											"pm.expect(target).to.have.property('description');\r",
											"pm.expect(target).to.have.property('participantLimit');\r",
											"pm.expect(target).to.have.property('state');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('location');\r",
											"pm.expect(target).to.have.property('requestModeration');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
											"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
											"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
											"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
											"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
											"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
											"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
											"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
											"    pm.expect(target.location.radius.toString()).equal(source.location.radius.toString(), 'Радиус локации проведения события должен соответствовать радиусу локации проведения события в запросе');\r",
											"    pm.expect(target.location.place).equal(source.location.place, 'Название локации проведения события должно соответствовать названию локации проведения события в запросе');\r",
											"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/admin/events/:eventId",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin updates event location that is in use",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event2;\r",
											"    let location;\r",
											"    let event;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const user2 = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        event2 = await api.addEvent(user2.id, rnd.getEventWithLocationId(category.id,event.location.id));\r",
											"        location = {radius: 1, place:\"new place\"};\r",
											"        location2 = event2.location;\r",
											"        location2.radius = location.radius;\r",
											"        location2.place = location.place;\r",
											"        pm.collectionVariables.set(\"eid\", event2.id);\r",
											"        pm.collectionVariables.set(\"response\", event2);\r",
											"        pm.collectionVariables.set(\"locationResponse\", location2);\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                location: location\r",
											"            }),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const locaionSource = pm.collectionVariables.get('locationResponse');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('annotation');\r",
											"pm.expect(target).to.have.property('category');\r",
											"pm.expect(target).to.have.property('paid');\r",
											"pm.expect(target).to.have.property('eventDate');\r",
											"pm.expect(target).to.have.property('initiator');\r",
											"pm.expect(target).to.have.property('description');\r",
											"pm.expect(target).to.have.property('participantLimit');\r",
											"pm.expect(target).to.have.property('state');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('location');\r",
											"pm.expect(target).to.have.property('requestModeration');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
											"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
											"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
											"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
											"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
											"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
											"    pm.expect(target.location.lat.toString()).equal(locaionSource.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
											"    pm.expect(target.location.lon.toString()).equal(locaionSource.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
											"    pm.expect(target.location.radius.toString()).equal(locaionSource.radius.toString(), 'Радиус локации проведения события должен соответствовать радиусу локации проведения события в запросе');\r",
											"    pm.expect(target.location.place).equal(locaionSource.place, 'Название локации проведения события должно соответствовать названию локации проведения события в запросе');\r",
											"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/admin/events/:eventId",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "User updates event location of another user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let user1;\r",
											"    let user2;\r",
											"    let location;\r",
											"    let event1;\r",
											"    let event2;\r",
											"    try {\r",
											"        user1 = await api.addUser(rnd.getUser());\r",
											"        user2 = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event1 = await api.addEvent(user1.id, rnd.getEvent(category.id));\r",
											"        event1 = await api.publishEvent(event1.id);\r",
											"        event2 = await api.addEvent(user2.id, rnd.getEventWithLocationId(category.id,event1.location.id));\r",
											"        location = rnd.getLocation();\r",
											"        pm.collectionVariables.set(\"uid\", user2.id);\r",
											"        pm.collectionVariables.set(\"eid\", event2.id);\r",
											"\r",
											"        pm.collectionVariables.set(\"response\", event2);\r",
											"        pm.collectionVariables.set(\"locationResponse\", location);\r",
											"\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                location: location\r",
											"            }),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const locaionSource = pm.collectionVariables.get('locationResponse');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('annotation');\r",
											"pm.expect(target).to.have.property('category');\r",
											"pm.expect(target).to.have.property('paid');\r",
											"pm.expect(target).to.have.property('eventDate');\r",
											"pm.expect(target).to.have.property('initiator');\r",
											"pm.expect(target).to.have.property('description');\r",
											"pm.expect(target).to.have.property('participantLimit');\r",
											"pm.expect(target).to.have.property('state');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('location');\r",
											"pm.expect(target).to.have.property('requestModeration');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
											"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
											"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
											"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
											"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
											"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
											"    pm.expect(target.location.lat.toString()).equal(locaionSource.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
											"    pm.expect(target.location.lon.toString()).equal(locaionSource.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
											"    pm.expect(target.location.radius.toString()).equal(locaionSource.radius.toString(), 'Радиус локации проведения события должен соответствовать радиусу локации проведения события в запросе');\r",
											"    pm.expect(target.location.place).equal(locaionSource.place, 'Название локации проведения события должно соответствовать названию локации проведения события в запросе');\r",
											"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/users/:userId/events/:eventId",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "User updates event location of another own event",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let user1;\r",
											"    let user2;\r",
											"    let location;\r",
											"    let location2;\r",
											"    let event1;\r",
											"    let event2;\r",
											"    try {\r",
											"        user1 = await api.addUser(rnd.getUser());\r",
											"        user2 = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event1 = await api.addEvent(user1.id, rnd.getEvent(category.id));\r",
											"        event1 = await api.publishEvent(event1.id);\r",
											"        event2 = await api.addEvent(user1.id, rnd.getEventWithLocationId(category.id,event1.location.id));\r",
											"        location = rnd.getLocation();\r",
											"        location2 = {\r",
											"            id: event1.location.id+1,\r",
											"            lat: location.lat,\r",
											"            lon: location.lon,\r",
											"            radius: location.radius,\r",
											"            place: location.place,\r",
											"         };\r",
											"        pm.collectionVariables.set(\"uid\", user1.id);\r",
											"        pm.collectionVariables.set(\"eid\", event2.id);\r",
											"\r",
											"        pm.collectionVariables.set(\"response\", event2);\r",
											"        pm.collectionVariables.set(\"locationResponse\", location2);\r",
											"\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                location: location\r",
											"            }),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const locaionSource = pm.collectionVariables.get('locationResponse');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('annotation');\r",
											"pm.expect(target).to.have.property('category');\r",
											"pm.expect(target).to.have.property('paid');\r",
											"pm.expect(target).to.have.property('eventDate');\r",
											"pm.expect(target).to.have.property('initiator');\r",
											"pm.expect(target).to.have.property('description');\r",
											"pm.expect(target).to.have.property('participantLimit');\r",
											"pm.expect(target).to.have.property('state');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('location');\r",
											"pm.expect(target).to.have.property('requestModeration');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
											"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
											"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
											"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
											"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
											"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
											"    pm.expect(target.location.id.toString()).equal(locaionSource.id.toString(), 'Идентификатор локации проведения события должен соответствовать идентификатору локации проведения события в запросе');\r",
											"    pm.expect(target.location.lat.toString()).equal(locaionSource.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
											"    pm.expect(target.location.lon.toString()).equal(locaionSource.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
											"    pm.expect(target.location.radius.toString()).equal(locaionSource.radius.toString(), 'Радиус локации проведения события должен соответствовать радиусу локации проведения события в запросе');\r",
											"    pm.expect(target.location.place).equal(locaionSource.place, 'Название локации проведения события должно соответствовать названию локации проведения события в запросе');\r",
											"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/users/:userId/events/:eventId",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "User updates event location of admin with no usages",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let user1;\r",
											"    let location;\r",
											"    let location1;\r",
											"    let event1;\r",
											"    try {\r",
											"        location = await api.addLocation(rnd.getLocation());\r",
											"        user1 = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event1 = await api.addEvent(user1.id, rnd.getEventWithLocationId(category.id,location.id));\r",
											"        location1 = rnd.getLocation();\r",
											"        location2 = {\r",
											"            id: event1.location.id+1,\r",
											"            lat: location1.lat,\r",
											"            lon: location1.lon,\r",
											"            radius: location1.radius,\r",
											"            place: location1.place,\r",
											"         };\r",
											"        pm.collectionVariables.set(\"uid\", user1.id);\r",
											"        pm.collectionVariables.set(\"eid\", event1.id);\r",
											"\r",
											"        pm.collectionVariables.set(\"response\", event1);\r",
											"        pm.collectionVariables.set(\"locationResponse\", location2);\r",
											"\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                location: location1\r",
											"            }),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const locaionSource = pm.collectionVariables.get('locationResponse');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('annotation');\r",
											"pm.expect(target).to.have.property('category');\r",
											"pm.expect(target).to.have.property('paid');\r",
											"pm.expect(target).to.have.property('eventDate');\r",
											"pm.expect(target).to.have.property('initiator');\r",
											"pm.expect(target).to.have.property('description');\r",
											"pm.expect(target).to.have.property('participantLimit');\r",
											"pm.expect(target).to.have.property('state');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('location');\r",
											"pm.expect(target).to.have.property('requestModeration');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
											"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
											"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
											"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
											"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
											"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
											"    pm.expect(target.location.id.toString()).equal(locaionSource.id.toString(), 'Идентификатор локации проведения события должен соответствовать идентификатору локации проведения события в запросе');\r",
											"    pm.expect(target.location.lat.toString()).equal(locaionSource.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
											"    pm.expect(target.location.lon.toString()).equal(locaionSource.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
											"    pm.expect(target.location.radius.toString()).equal(locaionSource.radius.toString(), 'Радиус локации проведения события должен соответствовать радиусу локации проведения события в запросе');\r",
											"    pm.expect(target.location.place).equal(locaionSource.place, 'Название локации проведения события должно соответствовать названию локации проведения события в запросе');\r",
											"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/users/:userId/events/:eventId",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "User updates own event location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let user1;\r",
											"    let location;\r",
											"    let event1;\r",
											"    try {\r",
											"        user1 = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event1 = await api.addEvent(user1.id, rnd.getEvent(category.id));\r",
											"        location = rnd.getLocation();\r",
											"        location2 = {\r",
											"            id: event1.location.id,\r",
											"            lat: location.lat,\r",
											"            lon: location.lon,\r",
											"            radius: location.radius,\r",
											"            place: location.place,\r",
											"         };\r",
											"        pm.collectionVariables.set(\"uid\", user1.id);\r",
											"        pm.collectionVariables.set(\"eid\", event1.id);\r",
											"\r",
											"        pm.collectionVariables.set(\"response\", event1);\r",
											"        pm.collectionVariables.set(\"locationResponse\", location2);\r",
											"\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                location: location\r",
											"            }),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const locaionSource = pm.collectionVariables.get('locationResponse');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('annotation');\r",
											"pm.expect(target).to.have.property('category');\r",
											"pm.expect(target).to.have.property('paid');\r",
											"pm.expect(target).to.have.property('eventDate');\r",
											"pm.expect(target).to.have.property('initiator');\r",
											"pm.expect(target).to.have.property('description');\r",
											"pm.expect(target).to.have.property('participantLimit');\r",
											"pm.expect(target).to.have.property('state');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('location');\r",
											"pm.expect(target).to.have.property('requestModeration');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
											"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
											"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
											"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
											"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
											"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
											"    pm.expect(target.location.id.toString()).equal(locaionSource.id.toString(), 'Идентификатор локации проведения события должен соответствовать идентификатору локации проведения события в запросе');\r",
											"    pm.expect(target.location.lat.toString()).equal(locaionSource.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
											"    pm.expect(target.location.lon.toString()).equal(locaionSource.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
											"    pm.expect(target.location.radius.toString()).equal(locaionSource.radius.toString(), 'Радиус локации проведения события должен соответствовать радиусу локации проведения события в запросе');\r",
											"    pm.expect(target.location.place).equal(locaionSource.place, 'Название локации проведения события должно соответствовать названию локации проведения события в запросе');\r",
											"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverUrl}}/users/:userId/events/:eventId",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin switches event location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location1;\r",
											"    let location2;\r",
											"    let event1;\r",
											"    try {\r",
											"        location1 = await api.addLocation(rnd.getLocation());\r",
											"        const user1 = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event1 = await api.addEvent(user1.id,rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eid\", event1.id);\r",
											"\r",
											"        pm.collectionVariables.set(\"response\", event1);\r",
											"        pm.collectionVariables.set(\"locationResponse\", location1);\r",
											"\r",
											"\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                location: {id:location1.id}\r",
											"            }),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const locaionSource = pm.collectionVariables.get('locationResponse');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('annotation');\r",
											"pm.expect(target).to.have.property('category');\r",
											"pm.expect(target).to.have.property('paid');\r",
											"pm.expect(target).to.have.property('eventDate');\r",
											"pm.expect(target).to.have.property('initiator');\r",
											"pm.expect(target).to.have.property('description');\r",
											"pm.expect(target).to.have.property('participantLimit');\r",
											"pm.expect(target).to.have.property('state');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('location');\r",
											"pm.expect(target).to.have.property('requestModeration');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
											"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
											"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
											"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
											"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
											"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
											"    pm.expect(target.location.id.toString()).equal(locaionSource.id.toString(), 'Идентификатор локации проведения события должен соответствовать идентификатору локации проведения события в запросе');\r",
											"    pm.expect(target.location.lat.toString()).equal(locaionSource.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
											"    pm.expect(target.location.lon.toString()).equal(locaionSource.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
											"    pm.expect(target.location.radius.toString()).equal(locaionSource.radius.toString(), 'Радиус локации проведения события должен соответствовать радиусу локации проведения события в запросе');\r",
											"    pm.expect(target.location.place).equal(locaionSource.place, 'Название локации проведения события должно соответствовать названию локации проведения события в запросе');\r",
											"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{serverUrl}}/admin/events/:eventId",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "User switches location of own event on other user unpublished location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location1;\r",
											"    let location2;\r",
											"    let event1;\r",
											"    let event2;\r",
											"    try {\r",
											"        const user1 = await api.addUser(rnd.getUser());\r",
											"        const user2 = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event1 = await api.addEvent(user1.id,rnd.getEvent(category.id));\r",
											"        event2 = await api.addEvent(user2.id,rnd.getEvent(category.id));\r",
											"        location1 = event1.location;\r",
											"        location2 = event2.location;\r",
											"        pm.collectionVariables.set(\"uid\", user1.id);\r",
											"        pm.collectionVariables.set(\"eid\", event1.id);\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                location: {id:location2.id}\r",
											"            }),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
											"    pm.response.to.be.notFound;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{serverUrl}}/users/:userId/events/:eventId",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "User switches location of own event on other user published location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location1;\r",
											"    let location2;\r",
											"    let event1;\r",
											"    let event2;\r",
											"    try {\r",
											"        const user1 = await api.addUser(rnd.getUser());\r",
											"        const user2 = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event1 = await api.addEvent(user1.id,rnd.getEvent(category.id));\r",
											"        event2 = await api.addEvent(user2.id,rnd.getEvent(category.id));\r",
											"        event2 = await api.publishEvent(event2.id);\r",
											"        location1 = event1.location;\r",
											"        location2 = event2.location;\r",
											"        pm.collectionVariables.set(\"uid\", user1.id);\r",
											"        pm.collectionVariables.set(\"eid\", event1.id);\r",
											"\r",
											"         pm.collectionVariables.set(\"response\", event1);\r",
											"        pm.collectionVariables.set(\"locationResponse\", location2);\r",
											"        pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                location: {id:location2.id}\r",
											"            }),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const locaionSource = pm.collectionVariables.get('locationResponse');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('annotation');\r",
											"pm.expect(target).to.have.property('category');\r",
											"pm.expect(target).to.have.property('paid');\r",
											"pm.expect(target).to.have.property('eventDate');\r",
											"pm.expect(target).to.have.property('initiator');\r",
											"pm.expect(target).to.have.property('description');\r",
											"pm.expect(target).to.have.property('participantLimit');\r",
											"pm.expect(target).to.have.property('state');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('location');\r",
											"pm.expect(target).to.have.property('requestModeration');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
											"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
											"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
											"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
											"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
											"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
											"    pm.expect(target.location.id.toString()).equal(locaionSource.id.toString(), 'Идентификатор локации проведения события должен соответствовать идентификатору локации проведения события в запросе');\r",
											"    pm.expect(target.location.lat.toString()).equal(locaionSource.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
											"    pm.expect(target.location.lon.toString()).equal(locaionSource.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
											"    pm.expect(target.location.radius.toString()).equal(locaionSource.radius.toString(), 'Радиус локации проведения события должен соответствовать радиусу локации проведения события в запросе');\r",
											"    pm.expect(target.location.place).equal(locaionSource.place, 'Название локации проведения события должно соответствовать названию локации проведения события в запросе');\r",
											"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{serverUrl}}/users/:userId/events/:eventId",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get methods",
					"item": [
						{
							"name": "Get locations",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location1;\r",
											"    let location2;\r",
											"    let location3;\r",
											"    let location4;\r",
											"   \r",
											"    try {\r",
											"        location1 = await api.addLocation(rnd.getLocation());\r",
											"        location2 = await api.addLocation(rnd.getLocation());\r",
											"        location3 = await api.addLocation(rnd.getLocation());\r",
											"        location4 = await api.addLocation(rnd.getLocation());\r",
											"        pm.request.removeQueryParams(['lat', 'lon','radius','country','city','place','from','size']);\r",
											"       \r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Пользователи должны содержать поля: id, name, email\", function () {\r",
											"    pm.expect(target[0]).to.have.property('id');\r",
											"    pm.expect(target[0]).to.have.property('lat');\r",
											"    pm.expect(target[0]).to.have.property('lon');\r",
											"    pm.expect(target[0]).to.have.property('radius');\r",
											"    pm.expect(target[0]).to.have.property('country');\r",
											"    pm.expect(target[0]).to.have.property('city');\r",
											"    pm.expect(target[0]).to.have.property('place');\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Должен быть найден только один пользователь по заданному фильтру\", function () {\r",
											"    pm.expect(target.length).to.gte(4);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverUrl}}/admin/locations/?lat&lon&radius&country&city&place&from&size",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations",
										""
									],
									"query": [
										{
											"key": "lat",
											"value": null
										},
										{
											"key": "lon",
											"value": null
										},
										{
											"key": "radius",
											"value": null
										},
										{
											"key": "country",
											"value": null
										},
										{
											"key": "city",
											"value": null
										},
										{
											"key": "place",
											"value": null
										},
										{
											"key": "from",
											"value": null
										},
										{
											"key": "size",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get locations pagination",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location1;\r",
											"    let location2;\r",
											"    let location3;\r",
											"    let location4;\r",
											"   \r",
											"    try {\r",
											"        location1 = await api.addLocation(rnd.getLocation());\r",
											"        location2 = await api.addLocation(rnd.getLocation());\r",
											"        location3 = await api.addLocation(rnd.getLocation());\r",
											"        location4 = await api.addLocation(rnd.getLocation());\r",
											"        pm.request.removeQueryParams(['lat', 'lon','radius','country','city','place','from','size']);\r",
											"        pm.request.addQueryParams([`from=` + 1, 'size=' + 2]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Пользователи должны содержать поля: id, name, email\", function () {\r",
											"    pm.expect(target[0]).to.have.property('id');\r",
											"    pm.expect(target[0]).to.have.property('lat');\r",
											"    pm.expect(target[0]).to.have.property('lon');\r",
											"    pm.expect(target[0]).to.have.property('radius');\r",
											"    pm.expect(target[0]).to.have.property('country');\r",
											"    pm.expect(target[0]).to.have.property('city');\r",
											"    pm.expect(target[0]).to.have.property('place');\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Должен быть найден только один пользователь по заданному фильтру\", function () {\r",
											"    pm.expect(target.length).to.gte(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverUrl}}/admin/locations/?lat&lon&radius&country&city&place&from&size",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations",
										""
									],
									"query": [
										{
											"key": "lat",
											"value": null
										},
										{
											"key": "lon",
											"value": null
										},
										{
											"key": "radius",
											"value": null
										},
										{
											"key": "country",
											"value": null
										},
										{
											"key": "city",
											"value": null
										},
										{
											"key": "place",
											"value": null
										},
										{
											"key": "from",
											"value": null
										},
										{
											"key": "size",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get locations by coords and radius",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location1;\r",
											"    let location2;\r",
											"    let location3;\r",
											"    let location4;\r",
											"   \r",
											"    try {\r",
											"        location1 = rnd.getLocation();\r",
											"        location1.lat = 60;\r",
											"        location1.lon = 60;\r",
											"        location1.radius = 10000;\r",
											"\r",
											"        location2 = rnd.getLocation();\r",
											"        location2.lat = 59.9336;\r",
											"        location2.lon = 60.07;\r",
											"        location2.radius = 5000;\r",
											"\r",
											"        location3 = rnd.getLocation();\r",
											"        location3.lat = 60.102;\r",
											"        location3.lon = 59.995;\r",
											"        location3.radius = 20000;\r",
											"\r",
											"        location4 = rnd.getLocation();\r",
											"        location4.lat = -60.102;\r",
											"        location4.lon = 59.995;\r",
											"        location4.radius = 2000;\r",
											"\r",
											"        location1 = await api.addLocation(location1);\r",
											"        location2 = await api.addLocation(location2);\r",
											"        location3 = await api.addLocation(location3);\r",
											"        location4 = await api.addLocation(location4);\r",
											"\r",
											"        pm.request.removeQueryParams(['lat', 'lon','radius','country','city','place','from','size']);\r",
											"        pm.request.addQueryParams([`lat=` + 59.952, 'lon=' + 60.054,'radius='+20000]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Пользователи должны содержать поля: id, name, email\", function () {\r",
											"    pm.expect(target[0]).to.have.property('id');\r",
											"    pm.expect(target[0]).to.have.property('lat');\r",
											"    pm.expect(target[0]).to.have.property('lon');\r",
											"    pm.expect(target[0]).to.have.property('radius');\r",
											"    pm.expect(target[0]).to.have.property('country');\r",
											"    pm.expect(target[0]).to.have.property('city');\r",
											"    pm.expect(target[0]).to.have.property('place');\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Должен быть найден только один пользователь по заданному фильтру\", function () {\r",
											"    pm.expect(target.length).to.gte(3);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverUrl}}/admin/locations/?lat&lon&radius&country&city&place&from&size",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations",
										""
									],
									"query": [
										{
											"key": "lat",
											"value": null
										},
										{
											"key": "lon",
											"value": null
										},
										{
											"key": "radius",
											"value": null
										},
										{
											"key": "country",
											"value": null
										},
										{
											"key": "city",
											"value": null
										},
										{
											"key": "place",
											"value": null
										},
										{
											"key": "from",
											"value": null
										},
										{
											"key": "size",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get locations by country",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location1;\r",
											"    let location2;\r",
											"    let location3;\r",
											"    let location4;\r",
											"   \r",
											"    try {\r",
											"        location1 = rnd.getLocation();\r",
											"        location1.lat = 59.60775059236821;\r",
											"        location1.lon = 60.60699757676971;\r",
											"        location1.radius = 10000;\r",
											"\r",
											"        location2 = rnd.getLocation();\r",
											"        location2.lat = 59.9336;\r",
											"        location2.lon = 60.07;\r",
											"        location2.radius = 5000;\r",
											"\r",
											"        location3 = rnd.getLocation();\r",
											"        location3.lat = 60.102;\r",
											"        location3.lon = 59.995;\r",
											"        location3.radius = 20000;\r",
											"\r",
											"        location4 = rnd.getLocation();\r",
											"        location4.lat = -60.102;\r",
											"        location4.lon = 59.995;\r",
											"        location4.radius = 2000;\r",
											"\r",
											"        location1 = await api.addLocation(location1);\r",
											"        location2 = await api.addLocation(location2);\r",
											"        location3 = await api.addLocation(location3);\r",
											"        location4 = await api.addLocation(location4);\r",
											"\r",
											"        pm.request.removeQueryParams(['lat', 'lon','radius','country','city','place','from','size']);\r",
											"        pm.request.addQueryParams([`country=` + \"Russia\"]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Пользователи должны содержать поля: id, name, email\", function () {\r",
											"    pm.expect(target[0]).to.have.property('id');\r",
											"    pm.expect(target[0]).to.have.property('lat');\r",
											"    pm.expect(target[0]).to.have.property('lon');\r",
											"    pm.expect(target[0]).to.have.property('radius');\r",
											"    pm.expect(target[0]).to.have.property('country');\r",
											"    pm.expect(target[0]).to.have.property('city');\r",
											"    pm.expect(target[0]).to.have.property('place');\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Должен быть найден только один пользователь по заданному фильтру\", function () {\r",
											"    pm.expect(target.length).to.gte(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverUrl}}/admin/locations/?lat&lon&radius&country&city&place&from&size",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations",
										""
									],
									"query": [
										{
											"key": "lat",
											"value": null
										},
										{
											"key": "lon",
											"value": null
										},
										{
											"key": "radius",
											"value": null
										},
										{
											"key": "country",
											"value": null
										},
										{
											"key": "city",
											"value": null
										},
										{
											"key": "place",
											"value": null
										},
										{
											"key": "from",
											"value": null
										},
										{
											"key": "size",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get locations by city",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location1;\r",
											"    let location2;\r",
											"    let location3;\r",
											"    let location4;\r",
											"   \r",
											"    try {\r",
											"        location1 = rnd.getLocation();\r",
											"        location1.lat = 59.60775059236821;\r",
											"        location1.lon = 60.60699757676971;\r",
											"        location1.radius = 10000;\r",
											"\r",
											"        location2 = rnd.getLocation();\r",
											"        location2.lat = 59.9336;\r",
											"        location2.lon = 60.07;\r",
											"        location2.radius = 5000;\r",
											"\r",
											"        location3 = rnd.getLocation();\r",
											"        location3.lat = 60.102;\r",
											"        location3.lon = 59.995;\r",
											"        location3.radius = 20000;\r",
											"\r",
											"        location4 = rnd.getLocation();\r",
											"        location4.lat = -60.102;\r",
											"        location4.lon = 59.995;\r",
											"        location4.radius = 2000;\r",
											"\r",
											"        location1 = await api.addLocation(location1);\r",
											"        location2 = await api.addLocation(location2);\r",
											"        location3 = await api.addLocation(location3);\r",
											"        location4 = await api.addLocation(location4);\r",
											"\r",
											"        pm.request.removeQueryParams(['lat', 'lon','radius','country','city','place','from','size']);\r",
											"        pm.request.addQueryParams([`city=` + \"Serov\"]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Пользователи должны содержать поля: id, name, email\", function () {\r",
											"    pm.expect(target[0]).to.have.property('id');\r",
											"    pm.expect(target[0]).to.have.property('lat');\r",
											"    pm.expect(target[0]).to.have.property('lon');\r",
											"    pm.expect(target[0]).to.have.property('radius');\r",
											"    pm.expect(target[0]).to.have.property('country');\r",
											"    pm.expect(target[0]).to.have.property('city');\r",
											"    pm.expect(target[0]).to.have.property('place');\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Должен быть найден только один пользователь по заданному фильтру\", function () {\r",
											"    pm.expect(target.length).to.gte(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverUrl}}/admin/locations/?lat&lon&radius&country&city&place&from&size",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations",
										""
									],
									"query": [
										{
											"key": "lat",
											"value": null
										},
										{
											"key": "lon",
											"value": null
										},
										{
											"key": "radius",
											"value": null
										},
										{
											"key": "country",
											"value": null
										},
										{
											"key": "city",
											"value": null
										},
										{
											"key": "place",
											"value": null
										},
										{
											"key": "from",
											"value": null
										},
										{
											"key": "size",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get locations by coords and place",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location1;\r",
											"    let location2;\r",
											"    let location3;\r",
											"    let location4;\r",
											"   \r",
											"    try {\r",
											"        location1 = rnd.getLocation();\r",
											"        location1.lat = 59.60775059236821;\r",
											"        location1.lon = 60.60699757676971;\r",
											"        location1.radius = 10000;\r",
											"        location1.place = \"this place\";\r",
											"\r",
											"        location2 = rnd.getLocation();\r",
											"        location2.lat = 59.9336;\r",
											"        location2.lon = 60.07;\r",
											"        location2.radius = 5000;\r",
											"        location2.place = \"this place\";\r",
											"\r",
											"\r",
											"        location3 = rnd.getLocation();\r",
											"        location3.lat = 60.102;\r",
											"        location3.lon = 59.995;\r",
											"        location3.radius = 20000;\r",
											"\r",
											"        location4 = rnd.getLocation();\r",
											"        location4.lat = -60.102;\r",
											"        location4.lon = 59.995;\r",
											"        location4.radius = 2000;\r",
											"        location4.place = \"this place\";\r",
											"\r",
											"\r",
											"        location1 = await api.addLocation(location1);\r",
											"        location2 = await api.addLocation(location2);\r",
											"        location3 = await api.addLocation(location3);\r",
											"        location4 = await api.addLocation(location4);\r",
											"\r",
											"        pm.request.removeQueryParams(['lat', 'lon','radius','country','city','place','from','size']);\r",
											"        pm.request.addQueryParams([`lat=` + 59.952, 'lon=' + 60.054,'radius='+50000,`place=` + \"this place\"]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Пользователи должны содержать поля: id, name, email\", function () {\r",
											"    pm.expect(target[0]).to.have.property('id');\r",
											"    pm.expect(target[0]).to.have.property('lat');\r",
											"    pm.expect(target[0]).to.have.property('lon');\r",
											"    pm.expect(target[0]).to.have.property('radius');\r",
											"    pm.expect(target[0]).to.have.property('country');\r",
											"    pm.expect(target[0]).to.have.property('city');\r",
											"    pm.expect(target[0]).to.have.property('place');\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Должен быть найден только один пользователь по заданному фильтру\", function () {\r",
											"    pm.expect(target.length).to.gte(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverUrl}}/admin/locations/?lat&lon&radius&country&city&place&from&size",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations",
										""
									],
									"query": [
										{
											"key": "lat",
											"value": null
										},
										{
											"key": "lon",
											"value": null
										},
										{
											"key": "radius",
											"value": null
										},
										{
											"key": "country",
											"value": null
										},
										{
											"key": "city",
											"value": null
										},
										{
											"key": "place",
											"value": null
										},
										{
											"key": "from",
											"value": null
										},
										{
											"key": "size",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get locations by coords and place public",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location1;\r",
											"    let location2;\r",
											"    let location3;\r",
											"    let location4;\r",
											"   \r",
											"    try {\r",
											"        location1 = rnd.getLocation();\r",
											"        location1.lat = 59.60775059236101;\r",
											"        location1.lon = 60.60699757697101;\r",
											"        location1.radius = 10000;\r",
											"        location1.place = \"another place\";\r",
											"\r",
											"        location2 = rnd.getLocation();\r",
											"        location2.lat = 59.9336;\r",
											"        location2.lon = 60.07;\r",
											"        location2.radius = 5000;\r",
											"        location2.place = \"another place\";\r",
											"\r",
											"\r",
											"        location3 = rnd.getLocation();\r",
											"        location3.lat = 60.102;\r",
											"        location3.lon = 59.995;\r",
											"        location3.radius = 20000;\r",
											"\r",
											"        location4 = rnd.getLocation();\r",
											"        location4.lat = -60.102;\r",
											"        location4.lon = 59.995;\r",
											"        location4.radius = 2000;\r",
											"        location4.place = \"another place\";\r",
											"\r",
											"        const user1 = await api.addUser(rnd.getUser());\r",
											"        const user2 = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event1 = rnd.getEvent(category.id);\r",
											"        event1.location = location1;\r",
											"        event2 = rnd.getEvent(category.id);\r",
											"        event2.location = location2;\r",
											"\r",
											"        event1 = await api.addEvent(user1.id,event1);\r",
											"        event2 = await api.addEvent(user2.id,event2);\r",
											"        event1 = await api.publishEvent(event1.id);\r",
											"\r",
											"        location2 = await api.addLocation(location3);\r",
											"        location4 = await api.addLocation(location4);\r",
											"\r",
											"        pm.request.removeQueryParams(['lat', 'lon','radius','country','city','place','from','size']);\r",
											"        pm.request.addQueryParams([`lat=` + 59.952, 'lon=' + 60.054,'radius='+50000,`place=` + \"another place\"]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Пользователи должны содержать поля: id, name, email\", function () {\r",
											"    pm.expect(target[0]).to.have.property('id');\r",
											"    pm.expect(target[0]).to.have.property('lat');\r",
											"    pm.expect(target[0]).to.have.property('lon');\r",
											"    pm.expect(target[0]).to.have.property('radius');\r",
											"    pm.expect(target[0]).to.have.property('country');\r",
											"    pm.expect(target[0]).to.have.property('city');\r",
											"    pm.expect(target[0]).to.have.property('place');\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Должен быть найден только один пользователь по заданному фильтру\", function () {\r",
											"    pm.expect(target.length).to.gte(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverUrl}}/locations/?lat&lon&radius&country&city&place&from&size",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"locations",
										""
									],
									"query": [
										{
											"key": "lat",
											"value": null
										},
										{
											"key": "lon",
											"value": null
										},
										{
											"key": "radius",
											"value": null
										},
										{
											"key": "country",
											"value": null
										},
										{
											"key": "city",
											"value": null
										},
										{
											"key": "place",
											"value": null
										},
										{
											"key": "from",
											"value": null
										},
										{
											"key": "size",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get admin location by id - public",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location1;\r",
											"   \r",
											"    try {\r",
											"        location1 = await api.addLocation(rnd.getLocation());\r",
											"        pm.collectionVariables.set(\"response\", location1);\r",
											"\r",
											"        pm.collectionVariables.set(\"locationId\", location1.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, lat, lon, radius, country, city, place\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('lat');\r",
											"pm.expect(target).to.have.property('lon');\r",
											"pm.expect(target).to.have.property('radius');\r",
											"pm.expect(target).to.have.property('country');\r",
											"pm.expect(target).to.have.property('city');\r",
											"pm.expect(target).to.have.property('place');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.lat).equal(source.lat, 'Широта должна совпадать');\r",
											"    pm.expect(target.lon).equal(source.lon, 'Долгота должна совпадать');\r",
											"    pm.expect(target.radius).equal(source.radius, 'Радиус должен совпадать');\r",
											"    pm.expect(target.place).equal(source.place, 'Назмание места должно совпадать');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverUrl}}/locations/:locationId",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"locations",
										":locationId"
									],
									"variable": [
										{
											"key": "locationId",
											"value": "{{locationId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get admin location by id - admin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location1;\r",
											"   \r",
											"    try {\r",
											"        location1 = await api.addLocation(rnd.getLocation());\r",
											"        pm.collectionVariables.set(\"response\", location1);\r",
											"\r",
											"        pm.collectionVariables.set(\"locationId\", location1.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, lat, lon, radius, country, city, place\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('lat');\r",
											"pm.expect(target).to.have.property('lon');\r",
											"pm.expect(target).to.have.property('radius');\r",
											"pm.expect(target).to.have.property('country');\r",
											"pm.expect(target).to.have.property('city');\r",
											"pm.expect(target).to.have.property('place');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.lat).equal(source.lat, 'Широта должна совпадать');\r",
											"    pm.expect(target.lon).equal(source.lon, 'Долгота должна совпадать');\r",
											"    pm.expect(target.radius).equal(source.radius, 'Радиус должен совпадать');\r",
											"    pm.expect(target.place).equal(source.place, 'Назмание места должно совпадать');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverUrl}}/admin/locations/:locationId",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations",
										":locationId"
									],
									"variable": [
										{
											"key": "locationId",
											"value": "{{locationId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user`s published location by id - public",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location1;\r",
											"   \r",
											"    try {\r",
											"\r",
											"        user1 = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event1 = await api.addEvent(user1.id, rnd.getEvent(category.id));\r",
											"        event1 = await api.publishEvent(event1.id);\r",
											"        location1 = event1.location;\r",
											"        pm.collectionVariables.set(\"response\", location1);\r",
											"        pm.collectionVariables.set(\"locationId\", location1.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, lat, lon, radius, country, city, place\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('lat');\r",
											"pm.expect(target).to.have.property('lon');\r",
											"pm.expect(target).to.have.property('radius');\r",
											"pm.expect(target).to.have.property('country');\r",
											"pm.expect(target).to.have.property('city');\r",
											"pm.expect(target).to.have.property('place');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.lat.toString()).equal(source.lat.toString(), 'Широта должна совпадать');\r",
											"    pm.expect(target.lon.toString()).equal(source.lon.toString(), 'Долгота должна совпадать');\r",
											"    pm.expect(target.radius.toString()).equal(source.radius.toString(), 'Радиус должен совпадать');\r",
											"    pm.expect(target.place).equal(source.place, 'Назмание места должно совпадать');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverUrl}}/locations/:locationId",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"locations",
										":locationId"
									],
									"variable": [
										{
											"key": "locationId",
											"value": "{{locationId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user`s  non published location by id - public Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location1;\r",
											"    let event1;\r",
											"   \r",
											"    try {\r",
											"\r",
											"        user1 = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event1 = await api.addEvent(user1.id, rnd.getEvent(category.id));\r",
											"        location1 = event1.location;\r",
											"        pm.collectionVariables.set(\"response\", location1);\r",
											"        pm.collectionVariables.set(\"locationId\", location1.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
											"    pm.response.to.have.status(404);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverUrl}}/locations/:locationId",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"locations",
										":locationId"
									],
									"variable": [
										{
											"key": "locationId",
											"value": "{{locationId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user`s  non published location by id - admin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location1;\r",
											"   \r",
											"    try {\r",
											"\r",
											"        user1 = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event1 = await api.addEvent(user1.id, rnd.getEvent(category.id));\r",
											"        location1 = event1.location;\r",
											"        pm.collectionVariables.set(\"response\", location1);\r",
											"        pm.collectionVariables.set(\"locationId\", location1.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, lat, lon, radius, country, city, place\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('lat');\r",
											"pm.expect(target).to.have.property('lon');\r",
											"pm.expect(target).to.have.property('radius');\r",
											"pm.expect(target).to.have.property('country');\r",
											"pm.expect(target).to.have.property('city');\r",
											"pm.expect(target).to.have.property('place');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.lat.toString()).equal(source.lat.toString(), 'Широта должна совпадать');\r",
											"    pm.expect(target.lon.toString()).equal(source.lon.toString(), 'Долгота должна совпадать');\r",
											"    pm.expect(target.radius.toString()).equal(source.radius.toString(), 'Радиус должен совпадать');\r",
											"    pm.expect(target.place).equal(source.place, 'Назмание места должно совпадать');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverUrl}}/admin/locations/:locationId",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"locations",
										":locationId"
									],
									"variable": [
										{
											"key": "locationId",
											"value": "{{locationId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get events by location - admin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location1;\r",
											"    let location2;\r",
											"    let location3;\r",
											"    let location4;\r",
											"   \r",
											"    try {\r",
											"        location1 = rnd.getLocation();\r",
											"        location1.lat = 59.60775059236821;\r",
											"        location1.lon = 60.60699757676971;\r",
											"        location1.radius = 10000;\r",
											"        location1.place = \"admin event place\";\r",
											"\r",
											"        location2 = rnd.getLocation();\r",
											"        location2.lat = 59.9336;\r",
											"        location2.lon = 60.07;\r",
											"        location2.radius = 5000;\r",
											"        location2.place = \"admin event place\";\r",
											"\r",
											"\r",
											"        location3 = rnd.getLocation();\r",
											"        location3.lat = 60.102;\r",
											"        location3.lon = 59.995;\r",
											"        location3.radius = 20000;\r",
											"\r",
											"        location4 = rnd.getLocation();\r",
											"        location4.lat = -60.102;\r",
											"        location4.lon = 59.995;\r",
											"        location4.radius = 2000;\r",
											"        location4.place = \"admin event place\";\r",
											"\r",
											"        const user1 = await api.addUser(rnd.getUser());\r",
											"        const user2 = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event1 = rnd.getEvent(category.id);\r",
											"        event1.location = location1;\r",
											"        event2 = rnd.getEvent(category.id);\r",
											"        event2.location = location2;\r",
											"\r",
											"        event1 = await api.addEvent(user1.id,event1);\r",
											"        event2 = await api.addEvent(user2.id,event2);\r",
											"        event1 = await api.publishEvent(event1.id);\r",
											"\r",
											"        location3 = await api.addLocation(location3);\r",
											"        location4 = await api.addLocation(location4);\r",
											"\r",
											"\r",
											"\r",
											"        pm.request.removeQueryParams(['lat', 'lon','radius','country','city','place','from','size']);\r",
											"        pm.request.addQueryParams([`lat=` + 59.952, 'lon=' + 60.054,'radius='+50000,`place=` + \"admin event place\"]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
											"\r",
											"pm.expect(target[0]).to.have.property('id');\r",
											"pm.expect(target[0]).to.have.property('title');\r",
											"pm.expect(target[0]).to.have.property('annotation');\r",
											"pm.expect(target[0]).to.have.property('category');\r",
											"pm.expect(target[0]).to.have.property('paid');\r",
											"pm.expect(target[0]).to.have.property('eventDate');\r",
											"pm.expect(target[0]).to.have.property('initiator');\r",
											"pm.expect(target[0]).to.have.property('description');\r",
											"pm.expect(target[0]).to.have.property('participantLimit');\r",
											"pm.expect(target[0]).to.have.property('state');\r",
											"pm.expect(target[0]).to.have.property('createdOn');\r",
											"pm.expect(target[0]).to.have.property('location');\r",
											"pm.expect(target[0]).to.have.property('requestModeration');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Должен быть найден только один пользователь по заданному фильтру\", function () {\r",
											"    pm.expect(target.length).to.eq(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverUrl}}/admin/events/?lat&lon&radius&country&city&place&from&size",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"admin",
										"events",
										""
									],
									"query": [
										{
											"key": "lat",
											"value": null
										},
										{
											"key": "lon",
											"value": null
										},
										{
											"key": "radius",
											"value": null
										},
										{
											"key": "country",
											"value": null
										},
										{
											"key": "city",
											"value": null
										},
										{
											"key": "place",
											"value": null
										},
										{
											"key": "from",
											"value": null
										},
										{
											"key": "size",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get events by location - public",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location1;\r",
											"    let location2;\r",
											"    let location3;\r",
											"    let location4;\r",
											"   \r",
											"    try {\r",
											"        location1 = rnd.getLocation();\r",
											"        location1.lat = 59.60775059236821;\r",
											"        location1.lon = 60.60699757676971;\r",
											"        location1.radius = 10000;\r",
											"        location1.place = \"public event place\";\r",
											"\r",
											"        location2 = rnd.getLocation();\r",
											"        location2.lat = 59.9336;\r",
											"        location2.lon = 60.07;\r",
											"        location2.radius = 5000;\r",
											"        location2.place = \"public event place\";\r",
											"\r",
											"\r",
											"        location3 = rnd.getLocation();\r",
											"        location3.lat = 60.102;\r",
											"        location3.lon = 59.995;\r",
											"        location3.radius = 20000;\r",
											"\r",
											"        location4 = rnd.getLocation();\r",
											"        location4.lat = -60.102;\r",
											"        location4.lon = 59.995;\r",
											"        location4.radius = 2000;\r",
											"        location4.place = \"public event place\";\r",
											"\r",
											"        const user1 = await api.addUser(rnd.getUser());\r",
											"        const user2 = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event1 = rnd.getEvent(category.id);\r",
											"        event1.location = location1;\r",
											"        event2 = rnd.getEvent(category.id);\r",
											"        event2.location = location2;\r",
											"\r",
											"        event1 = await api.addEvent(user1.id,event1);\r",
											"        event2 = await api.addEvent(user2.id,event2);\r",
											"        event1 = await api.publishEvent(event1.id);\r",
											"\r",
											"        location2 = await api.addLocation(location3);\r",
											"        location4 = await api.addLocation(location4);\r",
											"\r",
											"\r",
											"\r",
											"        pm.request.removeQueryParams(['lat', 'lon','radius','country','city','place','from','size']);\r",
											"        pm.request.addQueryParams([`lat=` + 59.952, 'lon=' + 60.054,'radius='+50000,`place=` + \"public event place\"]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
											"\r",
											"pm.expect(target[0]).to.have.property('id');\r",
											"pm.expect(target[0]).to.have.property('title');\r",
											"pm.expect(target[0]).to.have.property('annotation');\r",
											"pm.expect(target[0]).to.have.property('category');\r",
											"pm.expect(target[0]).to.have.property('paid');\r",
											"pm.expect(target[0]).to.have.property('eventDate');\r",
											"pm.expect(target[0]).to.have.property('initiator');\r",
											"});\r",
											"\r",
											"pm.test(\"Должен быть найден только один пользователь по заданному фильтру\", function () {\r",
											"    pm.expect(target.length).to.eq(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverUrl}}/events/?lat&lon&radius&country&city&place&from&size",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"events",
										""
									],
									"query": [
										{
											"key": "lat",
											"value": null
										},
										{
											"key": "lon",
											"value": null
										},
										{
											"key": "radius",
											"value": null
										},
										{
											"key": "country",
											"value": null
										},
										{
											"key": "city",
											"value": null
										},
										{
											"key": "place",
											"value": null
										},
										{
											"key": "from",
											"value": null
										},
										{
											"key": "size",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addLocation(location, verbose = null){",
					"        return this.post(\"/admin/locations\", location, \"Ошибка при добавлении локации: \", verbose);",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"",
					"    async updateEvent(eventId,body, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, body, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getLocation() {",
					"        return {",
					"            lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"            lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            radius: parseInt(pm.variables.replaceIn('{{$randomInt}}')),",
					"            place: pm.variables.replaceIn('{{$randomWord}}')",
					"        };",
					"    }",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"                radius: pm.variables.replaceIn('{{$randomInt}}'),",
					"                place: pm.variables.replaceIn('{{$randomWord}}')",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getEventWithLocationId(categoryId, locationId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                id: locationId",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "serverUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "request_body",
			"value": "",
			"type": "string"
		},
		{
			"key": "uid",
			"value": ""
		},
		{
			"key": "eid",
			"value": "",
			"type": "string"
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "locationId",
			"value": "",
			"type": "string"
		},
		{
			"key": "locationResponse",
			"value": ""

		}
	]
}